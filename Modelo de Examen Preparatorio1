															

Ejercicio 1.

public int promocionLocal(Provincia provincia, int saltenias, int tucumanas){
	int cantidadCajas = 0; 
	switch(procvincia){
	case SALTA: 
		cantidadCajas = calcularCantidad(saltenias,tucumanas,4,2);
		break;
	case TUCUMAN: 
		cantidadCajas = calcularCantidad(saltenias,tucumanas,2,4);
		break;
	default: 
		cantidadCajas = calcularCantidad(saltenias,tucumanas,3,3);
		break;
	}
	return cantidadCajas;
}

private int calcularCajas(int saltenias, int tucumanas, int a, int b){
	int cantidad; 
	saltenias = (saltenias - (saltenias % a) / a; 
	tucumanas = (tucumanas - (tucumanas % b) / b);
	cantidad = Math.min(saltenias,tucumanas); 
	return cantidad;
}

Ejercicio 2. 

public class CocinaRegional{

private String[] empanadas = {"carne suave", "carne picante", "pollo", "humita"}; 

public double calcularPrecioSegunCantidad(String empanada, int cantidad, double precio){
	if (empanada == empanadas[0] || empanada == empanadas [1] && cantidad < 24){
	return precio * 2; 
	} else if (cantidad  >= 24){
		return precio * 1.1;
	}
}
}

B. Error de compilación del código: "Missing return statement". Falta el return al final del código (si o si tiene que devolver un double). 

Ejercicio 3. 

El error está en la línea 4 del archivo Archivo EmpanadaPicante.Java. Al llamar al cosntructor de la clase superior pasa los parámetros al revés. 

Ejercicio 4. 

A) Falso. Al ser privado el atributo de la clase SalteñaCarne, la clase EmpanadaCarne no podrá verlos y deberá usar los métodos get. 
B) Falso. No importa que los atributos se hereden, si está definido como privado no podrá acceder.
C) Falso. Usando super() solamente podrá acceder al constructor de su clase padre INMEDIATA, es decir, EmpanadaJujeña. 
D) Verdadero.
